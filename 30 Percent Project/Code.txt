import numpy as np
import tensorflow as tf
import cv2
import time
from google.colab.patches import cv2_imshow
import os

# Check if GPU is available
print("Num GPUs Available:", len(tf.config.experimental.list_physical_devices('GPU')))

# Set GPU index (change this based on your setup)
os.environ['CUDA_VISIBLE_DEVICES'] = '0'

# Limit GPU memory growth
gpus = tf.config.experimental.list_physical_devices('GPU')
if gpus:
    try:
        for gpu in gpus:
            tf.config.experimental.set_memory_growth(gpu, True)
    except RuntimeError as e:
        print(e)

class DetectorAPI:
    def _init_(self, path_to_ckpt):
        self.path_to_ckpt = path_to_ckpt

        # Load the frozen inference graph
        self.detection_graph = tf.compat.v1.Graph()
        with self.detection_graph.as_default():
            od_graph_def = tf.compat.v1.GraphDef()
            with tf.compat.v2.io.gfile.GFile(self.path_to_ckpt, 'rb') as fid:
                serialized_graph = fid.read()
                od_graph_def.ParseFromString(serialized_graph)
                tf.import_graph_def(od_graph_def, name='')

        self.default_graph = self.detection_graph.as_default()
        self.sess = tf.compat.v1.Session(graph=self.detection_graph)

        self.image_tensor = self.detection_graph.get_tensor_by_name('image_tensor:0')
        self.detection_boxes = self.detection_graph.get_tensor_by_name('detection_boxes:0')
        self.detection_scores = self.detection_graph.get_tensor_by_name('detection_scores:0')
        self.detection_classes = self.detection_graph.get_tensor_by_name('detection_classes:0')
        self.num_detections = self.detection_graph.get_tensor_by_name('num_detections:0')

    def processFrame(self, image):
        image_np_expanded = np.expand_dims(image, axis=0)
        start_time = time.time()
        (boxes, scores, classes, num) = self.sess.run(
            [self.detection_boxes, self.detection_scores, self.detection_classes, self.num_detections],
            feed_dict={self.image_tensor: image_np_expanded})
        end_time = time.time()

        im_height, im_width, _ = image.shape
        boxes_list = [None for i in range(boxes.shape[1])]
        for i in range(boxes.shape[1]):
            boxes_list[i] = (int(boxes[0, i, 0] * im_height),
                            int(boxes[0, i, 1] * im_width),
                            int(boxes[0, i, 2] * im_height),
                            int(boxes[0, i, 3] * im_width))

        return boxes_list, scores[0].tolist(), [int(x) for x in classes[0].tolist()], int(num[0])

    def close(self):
        self.sess.close()
        self.default_graph.close()

model_file = '/content/frozen_inference_graph.pb'
video_file = '/content/Busy people walking the city streets in London, HD Stock Footage.mp4'

odapi = DetectorAPI(path_to_ckpt=model_file)
threshold = 0.85
cap = cv2.VideoCapture(video_file)

total_detections = 0
correct_detections = 0

while True:
    r, img = cap.read()
    if not r:
        break
    img = cv2.resize(img, (1280, 720), interpolation=cv2.INTER_AREA)

    boxes, scores, classes, num = odapi.processFrame(img)

    total = len(scores)
    total_detections += total
    correctbox = 0

    for i in range(len(boxes)):
        if classes[i] == 1 and scores[i] > threshold:
            correctbox += 1
            box = boxes[i]
            cv2.rectangle(img, (int(box[1]), int(box[0])), (int(box[3]), int(box[2])), (255, 0, 0), 2)

    cv2_imshow(img)
    print(correctbox / total)
    correct_detections += correctbox

    key = cv2.waitKey(1)
    if key & 0xFF == ord('q'):
        break

# Calculate and print accuracy at the end as a percentage
accuracy_percentage = (correct_detections / total_detections) * 100
print(f"Total Detections: {total_detections}")
print(f"Correct Detections: {correct_detections}")
print(f"Accuracy: {accuracy_percentage:.2f}%")